/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface SmoothlyAccordionItem {
    'brand'?: string | string[];
    'checked'?: boolean;
    'name': string;
  }
  interface SmoothlyAccordionItemAttributes extends StencilHTMLAttributes {
    'brand'?: string | string[];
    'checked'?: boolean;
    'name'?: string;
    'onSmoothlyAccordionItemDidLoad'?: (event: CustomEvent<void>) => void;
    'onSmoothlyAccordionItemDidUnload'?: (event: CustomEvent<void>) => void;
    'onSmoothlyDeselect'?: (event: CustomEvent<{ name: string, checked: boolean }>) => void;
    'onSmoothlySelect'?: (event: CustomEvent<{ name: string, checked: boolean }>) => void;
  }

  interface SmoothlyAccordion {
    'value'?: string;
  }
  interface SmoothlyAccordionAttributes extends StencilHTMLAttributes {
    'value'?: string;
  }

  interface SmoothlyInput {
    'inputMode': string;
    'mandatory': boolean;
    'maxLength'?: number;
    'name': string;
    'placeholder'?: string;
    'tabIndex': number;
    'type': "text" | "email";
    'valid': boolean;
    'value': string;
  }
  interface SmoothlyInputAttributes extends StencilHTMLAttributes {
    'inputMode'?: string;
    'mandatory'?: boolean;
    'maxLength'?: number;
    'name'?: string;
    'onChanged'?: (event: CustomEvent<SmoothlyInput>) => void;
    'placeholder'?: string;
    'tabIndex'?: number;
    'type'?: "text" | "email";
    'valid'?: boolean;
    'value'?: string;
  }

  interface SmoothlyRadio {
    'checked': boolean;
    'name': string;
    'tabIndex': number;
    'value': string;
  }
  interface SmoothlyRadioAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'name'?: string;
    'tabIndex'?: number;
    'value'?: string;
  }

  interface SmoothlySpinner {
    'active': boolean;
  }
  interface SmoothlySpinnerAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
  }

  interface SmoothlySubmit {
    'processing': boolean;
  }
  interface SmoothlySubmitAttributes extends StencilHTMLAttributes {
    'onSubmit'?: (event: CustomEvent<{ [key: string]: string }>) => void;
    'processing'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SmoothlyAccordionItem': Components.SmoothlyAccordionItem;
    'SmoothlyAccordion': Components.SmoothlyAccordion;
    'SmoothlyInput': Components.SmoothlyInput;
    'SmoothlyRadio': Components.SmoothlyRadio;
    'SmoothlySpinner': Components.SmoothlySpinner;
    'SmoothlySubmit': Components.SmoothlySubmit;
  }

  interface StencilIntrinsicElements {
    'smoothly-accordion-item': Components.SmoothlyAccordionItemAttributes;
    'smoothly-accordion': Components.SmoothlyAccordionAttributes;
    'smoothly-input': Components.SmoothlyInputAttributes;
    'smoothly-radio': Components.SmoothlyRadioAttributes;
    'smoothly-spinner': Components.SmoothlySpinnerAttributes;
    'smoothly-submit': Components.SmoothlySubmitAttributes;
  }


  interface HTMLSmoothlyAccordionItemElement extends Components.SmoothlyAccordionItem, HTMLStencilElement {}
  var HTMLSmoothlyAccordionItemElement: {
    prototype: HTMLSmoothlyAccordionItemElement;
    new (): HTMLSmoothlyAccordionItemElement;
  };

  interface HTMLSmoothlyAccordionElement extends Components.SmoothlyAccordion, HTMLStencilElement {}
  var HTMLSmoothlyAccordionElement: {
    prototype: HTMLSmoothlyAccordionElement;
    new (): HTMLSmoothlyAccordionElement;
  };

  interface HTMLSmoothlyInputElement extends Components.SmoothlyInput, HTMLStencilElement {}
  var HTMLSmoothlyInputElement: {
    prototype: HTMLSmoothlyInputElement;
    new (): HTMLSmoothlyInputElement;
  };

  interface HTMLSmoothlyRadioElement extends Components.SmoothlyRadio, HTMLStencilElement {}
  var HTMLSmoothlyRadioElement: {
    prototype: HTMLSmoothlyRadioElement;
    new (): HTMLSmoothlyRadioElement;
  };

  interface HTMLSmoothlySpinnerElement extends Components.SmoothlySpinner, HTMLStencilElement {}
  var HTMLSmoothlySpinnerElement: {
    prototype: HTMLSmoothlySpinnerElement;
    new (): HTMLSmoothlySpinnerElement;
  };

  interface HTMLSmoothlySubmitElement extends Components.SmoothlySubmit, HTMLStencilElement {}
  var HTMLSmoothlySubmitElement: {
    prototype: HTMLSmoothlySubmitElement;
    new (): HTMLSmoothlySubmitElement;
  };

  interface HTMLElementTagNameMap {
    'smoothly-accordion-item': HTMLSmoothlyAccordionItemElement
    'smoothly-accordion': HTMLSmoothlyAccordionElement
    'smoothly-input': HTMLSmoothlyInputElement
    'smoothly-radio': HTMLSmoothlyRadioElement
    'smoothly-spinner': HTMLSmoothlySpinnerElement
    'smoothly-submit': HTMLSmoothlySubmitElement
  }

  interface ElementTagNameMap {
    'smoothly-accordion-item': HTMLSmoothlyAccordionItemElement;
    'smoothly-accordion': HTMLSmoothlyAccordionElement;
    'smoothly-input': HTMLSmoothlyInputElement;
    'smoothly-radio': HTMLSmoothlyRadioElement;
    'smoothly-spinner': HTMLSmoothlySpinnerElement;
    'smoothly-submit': HTMLSmoothlySubmitElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
