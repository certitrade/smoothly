/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Currency,
  DateTime,
} from 'isoly';
import {
  Autocomplete,
} from './components/input/browser';
import {
  Color,
} from './Color';
import {
  Expand,
} from './Expand';
import {
  Fill,
} from './Fill';


export namespace Components {

  interface SmoothlyAccordionItem {
    'brand'?: string | string[];
    'name': string;
    'open'?: boolean;
  }
  interface SmoothlyAccordionItemAttributes extends StencilHTMLAttributes {
    'brand'?: string | string[];
    'name'?: string;
    'onSmoothlyAccordionItemDidLoad'?: (event: CustomEvent<void>) => void;
    'onSmoothlyAccordionItemDidUnload'?: (event: CustomEvent<void>) => void;
    'onSmoothlyClose'?: (event: CustomEvent<{ name: string, open: boolean }>) => void;
    'onSmoothlyOpen'?: (event: CustomEvent<{ name: string, open: boolean }>) => void;
    'open'?: boolean;
  }

  interface SmoothlyAccordion {
    'value'?: string;
  }
  interface SmoothlyAccordionAttributes extends StencilHTMLAttributes {
    'value'?: string;
  }

  interface SmoothlyDisplayAmount {
    'amount': number;
    'currency': Currency;
  }
  interface SmoothlyDisplayAmountAttributes extends StencilHTMLAttributes {
    'amount'?: number;
    'currency'?: Currency;
  }

  interface SmoothlyDisplayDateTime {
    'datetime': DateTime;
  }
  interface SmoothlyDisplayDateTimeAttributes extends StencilHTMLAttributes {
    'datetime'?: DateTime;
  }

  interface SmoothlyInput {
    'autocomplete': Autocomplete;
    'maxLength': number;
    'minLength': number;
    'name': string;
    'pattern': RegExp | undefined;
    'placeholder': string | undefined;
    'required': boolean;
    'type': string;
    'value': any;
  }
  interface SmoothlyInputAttributes extends StencilHTMLAttributes {
    'autocomplete'?: Autocomplete;
    'maxLength'?: number;
    'minLength'?: number;
    'name'?: string;
    'onSmoothlyChanged'?: (event: CustomEvent<{ value: any }>) => void;
    'pattern'?: RegExp | undefined;
    'placeholder'?: string | undefined;
    'required'?: boolean;
    'type'?: string;
    'value'?: any;
  }

  interface SmoothlyRadio {
    'checked': boolean;
    'name': string;
    'tabIndex': number;
    'value': string;
  }
  interface SmoothlyRadioAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'name'?: string;
    'onSmoothlySelected'?: (event: CustomEvent<{ name: string, value: string }>) => void;
    'tabIndex'?: number;
    'value'?: string;
  }

  interface SmoothlySpinner {
    'active': boolean;
  }
  interface SmoothlySpinnerAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
  }

  interface SmoothlySubmit {
    'color': Color | undefined;
    'expand': Expand;
    'fill': Fill;
    'processing': boolean;
  }
  interface SmoothlySubmitAttributes extends StencilHTMLAttributes {
    'color'?: Color | undefined;
    'expand'?: Expand;
    'fill'?: Fill;
    'onSubmit'?: (event: CustomEvent<{ [key: string]: string }>) => void;
    'processing'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SmoothlyAccordionItem': Components.SmoothlyAccordionItem;
    'SmoothlyAccordion': Components.SmoothlyAccordion;
    'SmoothlyDisplayAmount': Components.SmoothlyDisplayAmount;
    'SmoothlyDisplayDateTime': Components.SmoothlyDisplayDateTime;
    'SmoothlyInput': Components.SmoothlyInput;
    'SmoothlyRadio': Components.SmoothlyRadio;
    'SmoothlySpinner': Components.SmoothlySpinner;
    'SmoothlySubmit': Components.SmoothlySubmit;
  }

  interface StencilIntrinsicElements {
    'smoothly-accordion-item': Components.SmoothlyAccordionItemAttributes;
    'smoothly-accordion': Components.SmoothlyAccordionAttributes;
    'smoothly-display-amount': Components.SmoothlyDisplayAmountAttributes;
    'smoothly-display-date-time': Components.SmoothlyDisplayDateTimeAttributes;
    'smoothly-input': Components.SmoothlyInputAttributes;
    'smoothly-radio': Components.SmoothlyRadioAttributes;
    'smoothly-spinner': Components.SmoothlySpinnerAttributes;
    'smoothly-submit': Components.SmoothlySubmitAttributes;
  }


  interface HTMLSmoothlyAccordionItemElement extends Components.SmoothlyAccordionItem, HTMLStencilElement {}
  var HTMLSmoothlyAccordionItemElement: {
    prototype: HTMLSmoothlyAccordionItemElement;
    new (): HTMLSmoothlyAccordionItemElement;
  };

  interface HTMLSmoothlyAccordionElement extends Components.SmoothlyAccordion, HTMLStencilElement {}
  var HTMLSmoothlyAccordionElement: {
    prototype: HTMLSmoothlyAccordionElement;
    new (): HTMLSmoothlyAccordionElement;
  };

  interface HTMLSmoothlyDisplayAmountElement extends Components.SmoothlyDisplayAmount, HTMLStencilElement {}
  var HTMLSmoothlyDisplayAmountElement: {
    prototype: HTMLSmoothlyDisplayAmountElement;
    new (): HTMLSmoothlyDisplayAmountElement;
  };

  interface HTMLSmoothlyDisplayDateTimeElement extends Components.SmoothlyDisplayDateTime, HTMLStencilElement {}
  var HTMLSmoothlyDisplayDateTimeElement: {
    prototype: HTMLSmoothlyDisplayDateTimeElement;
    new (): HTMLSmoothlyDisplayDateTimeElement;
  };

  interface HTMLSmoothlyInputElement extends Components.SmoothlyInput, HTMLStencilElement {}
  var HTMLSmoothlyInputElement: {
    prototype: HTMLSmoothlyInputElement;
    new (): HTMLSmoothlyInputElement;
  };

  interface HTMLSmoothlyRadioElement extends Components.SmoothlyRadio, HTMLStencilElement {}
  var HTMLSmoothlyRadioElement: {
    prototype: HTMLSmoothlyRadioElement;
    new (): HTMLSmoothlyRadioElement;
  };

  interface HTMLSmoothlySpinnerElement extends Components.SmoothlySpinner, HTMLStencilElement {}
  var HTMLSmoothlySpinnerElement: {
    prototype: HTMLSmoothlySpinnerElement;
    new (): HTMLSmoothlySpinnerElement;
  };

  interface HTMLSmoothlySubmitElement extends Components.SmoothlySubmit, HTMLStencilElement {}
  var HTMLSmoothlySubmitElement: {
    prototype: HTMLSmoothlySubmitElement;
    new (): HTMLSmoothlySubmitElement;
  };

  interface HTMLElementTagNameMap {
    'smoothly-accordion-item': HTMLSmoothlyAccordionItemElement
    'smoothly-accordion': HTMLSmoothlyAccordionElement
    'smoothly-display-amount': HTMLSmoothlyDisplayAmountElement
    'smoothly-display-date-time': HTMLSmoothlyDisplayDateTimeElement
    'smoothly-input': HTMLSmoothlyInputElement
    'smoothly-radio': HTMLSmoothlyRadioElement
    'smoothly-spinner': HTMLSmoothlySpinnerElement
    'smoothly-submit': HTMLSmoothlySubmitElement
  }

  interface ElementTagNameMap {
    'smoothly-accordion-item': HTMLSmoothlyAccordionItemElement;
    'smoothly-accordion': HTMLSmoothlyAccordionElement;
    'smoothly-display-amount': HTMLSmoothlyDisplayAmountElement;
    'smoothly-display-date-time': HTMLSmoothlyDisplayDateTimeElement;
    'smoothly-input': HTMLSmoothlyInputElement;
    'smoothly-radio': HTMLSmoothlyRadioElement;
    'smoothly-spinner': HTMLSmoothlySpinnerElement;
    'smoothly-submit': HTMLSmoothlySubmitElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
